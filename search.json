[{"title":"基于mysql全文检索","url":"/2021/09/09/Mysql%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/","content":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>如何使用Mysql实现类似于ElasticSearch的全文检索功能呢？并且对关键词跑分呢？对于这个问题可能有人会问，为啥不会直接使用ES呢？简单还用效率高速度快。可是如果数据量不多，时间很紧，没有时间搭建ES，那么Mysql的全文检索也不是不可以。</p>\n<h2 id=\"二、全文索引（fulltext）\"><a href=\"#二、全文索引（fulltext）\" class=\"headerlink\" title=\"二、全文索引（fulltext）\"></a>二、全文索引（fulltext）</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>一般情况，我们通过数值比较、范围过滤等就可以满足绝大多数我们需要的查询，但是，如果希望通过关键字的匹配来进行查询过滤，那么就需要基于相似度的查询，而不是原来的精确数值的比较。全文索引就是为这种场景设计的。</p>\n<p>但是应<strong>like</strong>也可以实现模糊匹配，为什么还要用<strong>fulltext</strong>？<strong>like</strong>在文本比较少的时候适合，但是对于相对大量文本数据检索，是不可想象的，<strong>fulltext</strong>在大量的数据面前会比<strong>like</strong>快N倍，速度不是一个量级的，<strong>但是fulltext可能存在精度的问题。</strong></p>\n<p>在这里说一下<strong>fulltext</strong>的版本、存储引擎、数据类型的支持情况：</p>\n<p>​    ①Mysql 5.6 以前的版本，只有MylSAM存储引擎支持<strong>fulltext</strong>。</p>\n<p>​    ②Mysql 5.6 及以后的版本，MylSAM和InnoDB存储引擎都支持<strong>fulltext</strong>。</p>\n<p>​    ③在Mysql 5.7.6 之前，<strong>fulltext</strong>只支持英文全文索引，不支持中文全文索引，需要利用分词器把中文段落预处理拆分成单词，然后存入数据库。</p>\n<p>​    ④从Mysql 5.7.6 开始，Mysql 内置了ngram全文解析器，用来支持中文、日文、韩文分词。</p>\n<p>​    ⑤只有字段类型为char、varchar、text及其系列才可以创建<strong>fulltext</strong>。</p>\n<h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><p>①创建表时创建全文索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> fulltext_test (</span><br><span class=\"line\">    id <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">    content text <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">    tag <span class=\"type\">varchar</span>(<span class=\"number\">255</span>),</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY</span> KEY (id),</span><br><span class=\"line\">    FULLTEXT KEY content_tag_fulltext(content,tag)  <span class=\"operator\">/</span><span class=\"operator\">/</span> 创建联合全文索引列</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>MyISAM <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br></pre></td></tr></table></figure>\n\n<p>②在已存在的表上串讲全文索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> fulltext index content_tag_fulltext <span class=\"keyword\">on</span> fulltext_test(content,tag);</span><br></pre></td></tr></table></figure>\n\n<p>③通过SQL语句ALTER TABLE创建全文索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> fulltext_test <span class=\"keyword\">add</span> fulltext index content_tag_fulltext(content,tag);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><p>修改个O，删掉重建！！！</p>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>①直接使用DROP INDEX删除全文索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> index content_tag_fulltext <span class=\"keyword\">on</span> fulltext_test;</span><br></pre></td></tr></table></figure>\n\n<p>②通过SQL语句ALTER TABLE删除全文索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> fulltext_test <span class=\"keyword\">drop</span> index content_tag_fulltext;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、全文解析器ngram\"><a href=\"#三、全文解析器ngram\" class=\"headerlink\" title=\"三、全文解析器ngram\"></a>三、全文解析器ngram</h2><p>ngram就是一段文字里面连续的n个字的序列。ngram全文解析器能够对文本进行分词，每个单词是连续的n个字的序列。例如，用ngram全文解析器对“生日快乐”进行分词:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">n<span class=\"operator\">=</span><span class=\"number\">1</span>: <span class=\"string\">&#x27;生&#x27;</span>, <span class=\"string\">&#x27;日&#x27;</span>, <span class=\"string\">&#x27;快&#x27;</span>, <span class=\"string\">&#x27;乐&#x27;</span> </span><br><span class=\"line\">n<span class=\"operator\">=</span><span class=\"number\">2</span>: <span class=\"string\">&#x27;生日&#x27;</span>, <span class=\"string\">&#x27;日快&#x27;</span>, <span class=\"string\">&#x27;快乐&#x27;</span> </span><br><span class=\"line\">n<span class=\"operator\">=</span><span class=\"number\">3</span>: <span class=\"string\">&#x27;生日快&#x27;</span>, <span class=\"string\">&#x27;日快乐&#x27;</span> </span><br><span class=\"line\">n<span class=\"operator\">=</span><span class=\"number\">4</span>: <span class=\"string\">&#x27;生日快乐&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>Mysql 中使用全局变量 ngram_token_size 来配置 ngram 中 n 的大小，它的取值范围是1到10，默认值是 2。通常ngram_token_size设置为要查询的单词的最小字数。如果需要搜索单字，就要把ngram_token_size设置为 1。在默认值是 2 的情况下，搜索单字是得不到任何结果的。因为中文单词最少是两个汉字，推荐使用默认值 2。</p>\n<h3 id=\"全局变量ngram-token-size的两种设置方法：\"><a href=\"#全局变量ngram-token-size的两种设置方法：\" class=\"headerlink\" title=\"全局变量ngram_token_size的两种设置方法：\"></a>全局变量ngram_token_size的两种设置方法：</h3><p>①启动mysqld命令时</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqld <span class=\"comment\">--ngram_token_size=2</span></span><br></pre></td></tr></table></figure>\n\n<p>②修改MySQL配置文件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld] </span><br><span class=\"line\">ngram_token_size<span class=\"operator\">=</span><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、全文检索模式\"><a href=\"#四、全文检索模式\" class=\"headerlink\" title=\"四、全文检索模式\"></a>四、全文检索模式</h2><h3 id=\"自然语言检索\"><a href=\"#自然语言检索\" class=\"headerlink\" title=\"自然语言检索\"></a>自然语言检索</h3><p>（IN NATURAL LANGUAGE MODE）自然语言模式是 Mysql 默认的全文检索模式。自然语言模式不能使用操作符，不能指定关键词必须出现或者必须不能出现等复杂查询。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> fulltext_test</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">MATCH</span> (content,tag)</span><br><span class=\"line\">AGAINST (<span class=\"string\">&#x27;一路 一带&#x27;</span> <span class=\"keyword\">IN</span> <span class=\"keyword\">NATURAL</span> <span class=\"keyword\">LANGUAGE</span> MODE);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span> 不指定模式，默认使用自然语言模式</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> fulltext_test</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">MATCH</span> (content,tag)</span><br><span class=\"line\">AGAINST (<span class=\"string\">&#x27;一路 一带&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>返回结果会自动按照相关性排序，相关性高的在前面。相关性的值是一个非负浮点数，0表示无相关性。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span> 获取相关性的值</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> id,title,</span><br><span class=\"line\"><span class=\"keyword\">MATCH</span> (content,tag) AGAINST (<span class=\"string\">&#x27;手机&#x27;</span> <span class=\"keyword\">IN</span> <span class=\"keyword\">NATURAL</span> <span class=\"keyword\">LANGUAGE</span> MODE) <span class=\"keyword\">AS</span> score</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> fulltext_test</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> score <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"布尔检索\"><a href=\"#布尔检索\" class=\"headerlink\" title=\"布尔检索\"></a>布尔检索</h3><p>（IN BOOLEAN MODE）剔除一半匹配行以上都有的词，例如，每行都有this这个词的话，那用this去查时，会找不到任何结果，这在记录条数特别多时很有用，原因是数据库认为把所有行都找出来是没有意义的，这时，this几乎被当作是stopword(中断词)；布尔检索模式可以使用操作符，可以支持指定关键词必须出现或者必须不能出现或者关键词的权重高还是低等复杂查询。</p>\n<p>可以使用BOOLEAN模式执行高级查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span> 必须包含&quot;腾讯&quot;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> fulltext_test</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">MATCH</span> (content,tag)</span><br><span class=\"line\">AGAINST (<span class=\"string\">&#x27;+腾讯&#x27;</span> <span class=\"keyword\">IN</span> <span class=\"type\">BOOLEAN</span> MODE);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span> 必须包含&quot;腾讯&quot;，但是不能包含&quot;通讯工具&quot;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> fulltext_test</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> <span class=\"keyword\">MATCH</span> (content,tag)</span><br><span class=\"line\">AGAINST (<span class=\"string\">&#x27;+腾讯 -通讯工具&#x27;</span> <span class=\"keyword\">IN</span> <span class=\"type\">BOOLEAN</span> MODE);</span><br></pre></td></tr></table></figure>\n\n<p>下面的例子演示了BOOLEAN模式下运算符的使用方式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;apple banana&#x27;</span> </span><br><span class=\"line\">无操作符，表示或，要么包含apple，要么包含banana</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;+apple +juice&#x27;</span></span><br><span class=\"line\">必须同时包含两个词</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;+apple macintosh&#x27;</span></span><br><span class=\"line\">必须包含apple，但是如果也包含macintosh的话，相关性会更高。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;+apple -macintosh&#x27;</span></span><br><span class=\"line\">必须包含apple，同时不能包含macintosh。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;+apple ~macintosh&#x27;</span></span><br><span class=\"line\">必须包含apple，但是如果也包含macintosh的话，相关性要比不包含macintosh的记录低。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;+apple +(&gt;juice &lt;pie)&#x27;</span></span><br><span class=\"line\">查询必须包含apple和juice或者apple和pie的记录，但是apple juice的相关性要比apple pie高。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;apple*&#x27;</span></span><br><span class=\"line\">查询包含以apple开头的单词的记录，如apple、apples、applet。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&quot;some words&quot;&#x27;</span></span><br><span class=\"line\">使用双引号把要搜素的词括起来，效果类似于<span class=\"keyword\">like</span> <span class=\"string\">&#x27;%some words%&#x27;</span>，</span><br><span class=\"line\">例如“<span class=\"keyword\">some</span> words <span class=\"keyword\">of</span> wisdom”会被匹配到，而“<span class=\"keyword\">some</span> noise words”就不会被匹配。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查询扩展检索\"><a href=\"#查询扩展检索\" class=\"headerlink\" title=\"查询扩展检索\"></a>查询扩展检索</h3><p>使用”with query expansion”或”in natural language mode with query expansion”关键语法就可以开启自动相关性反馈。共有两个阶段：</p>\n<p>1.根据检索的单词进行全文检索。</p>\n<p>2.根据第一阶段产生的分词在进行一次全文检索，找出与第一阶段相关性比较高的单词。</p>\n<p><strong>（WITH QUERY EXPANSION）由于查询扩展可能带来许多非相关性的查询，谨慎使用！</strong></p>\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><ul>\n<li><p>使用 Mysql 全文索引之前，搞清楚各版本支持情况。</p>\n</li>\n<li><p>全文索引比 like + % 快 N 倍，但是可能存在精度问题。</p>\n</li>\n<li><p>只能在类型为CHAR、VARCHAR或者TEXT的字段上创建全文索引。</p>\n</li>\n<li><p>全文索引只支持InnoDB和MyISAM引擎。</p>\n</li>\n<li><p>MATCH (columnName) AGAINST (‘keywords’)。MATCH()函数使用的字段名，必须要与创建全文索引时指定的字段名一致。如上面的示例，MATCH (content,tag)使用的字段名与全文索引ft_articles(content,tag)定义的字段名一致。如果要对content或者tag字段分别进行查询，就需要在content和tag字段上分别创建新的全文索引。</p>\n</li>\n<li><p>MATCH()函数使用的字段名只能是同一个表的字段，因为全文索引不能够跨多个表进行检索。</p>\n</li>\n<li><p>如果要导入大数据集，使用先导入数据再在表上创建全文索引的方式要比先在表上创建全文索引再导入数据的方式快很多，所以全文索引是很影响TPS的。</p>\n</li>\n</ul>\n","tags":["Mysql"]},{"title":"基于Kubernetes的微服务架构","url":"/2021/08/24/%E5%9F%BA%E4%BA%8EKubernetes%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/","content":"<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>当引入了Spring Cloud 的微服务框架后，我们初步的解决了扩容缩容、独立部署、运维和管理的问题。但是，对于开发人员、设计人员、架构人员来说，工作并没有变得轻松。微服务的各种新技术名词，就足够一名新手学习好长时间，比如：配置中心、服务发现、网关、熔断、负载均衡等。各种Spring Cloud 技术套件更是层出不穷，如：Config、Eureka、Zuul、Hystrix、Ribbon、Feign 等。</p>\n<p>而之所以在微服务架构里，我们选择在应用层面，而不是基础设施层面去解决这些分布式问题，完全是因为由硬件构成的基础设施，跟不上由软件构成的应用服务灵活性的无奈之举。</p>\n<p>不过，当 Kubernetes 统一了容器编排管理系统之后，这些纯技术性的底层问题，就开始有了被广泛认可和采纳的基础设施层面的解决方案。</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>真正的区别在于，Kubernetes的实现中，直接删除了配置中心、服务注册中心的工程。在其他工程的pom.xml文件中，也删除了如 Eureka、Ribbon、Config 等组件的依赖。取而代之的是增加了若干以 YAML 配置文件为载体的Skaffold和 Kubernetes 的资源描述，这些资源描述文件，将会动态构建出 DNS 服务器、服务负载均衡器等一系列虚拟化的基础设施，去代替原有的应用层面的技术组件。升级改造之后的应用架构如下图所示：</p>\n<p><img src=\"https://i.loli.net/2021/08/24/pmwn6rPsUBqKeNf.png\"></p>\n<h2 id=\"技术组件\"><a href=\"#技术组件\" class=\"headerlink\" title=\"技术组件\"></a>技术组件</h2><h3 id=\"·-环境感知\"><a href=\"#·-环境感知\" class=\"headerlink\" title=\"· 环境感知\"></a>· 环境感知</h3><p>Spring Cloud Kubernetes 本身引入了 Fabric8 的Kubernetes Client作为容器环境感知，不过引用的版本很旧，比如 Spring Cloud Kubernetes 1.1.2 中，采用的是 Fabric8 Kubernetes Client 4.4.1，Fabric8 提供的兼容性列表中，这个版本只支持到 Kubernetes 1.14，虽然实测在 1.16 上也能用，但是在 1.18 上就无法识别到最新的 Api-Server。因此 Maven 引入依赖时，你需要手工处理，排除旧版本，引入新版本。</p>\n<h3 id=\"·配置中心\"><a href=\"#·配置中心\" class=\"headerlink\" title=\"·配置中心\"></a>·配置中心</h3><p>采用 Kubernetes 的 ConfigMap 来管理，通过Spring Cloud Kubernetes Config自动将 ConfigMap 的内容注入到 Spring 配置文件中，并实现动态更新。</p>\n<h3 id=\"·服务发现\"><a href=\"#·服务发现\" class=\"headerlink\" title=\"·服务发现\"></a>·服务发现</h3><p>采用 Kubernetes 的 Service 来管理，通过Spring Cloud Kubernetes Discovery自动将 HTTP 访问中的服务转换为FQDN。</p>\n<h3 id=\"·负载均衡\"><a href=\"#·负载均衡\" class=\"headerlink\" title=\"·负载均衡\"></a>·负载均衡</h3><p>采用 Kubernetes Service 本身的负载均衡能力实现（就是 DNS 负载均衡），就可以不再需要 Ribbon 这样的客户端负载均衡了。Spring Cloud Kubernetes 从 1.1.2 开始，也已经移除了对 Ribbon 的适配支持，也（暂时）没有对其代替品 Spring Cloud LoadBalancer 提供适配。</p>\n<h3 id=\"·服务网关\"><a href=\"#·服务网关\" class=\"headerlink\" title=\"·服务网关\"></a>·服务网关</h3><p>网关部分仍然保留了 Zuul，没有采用 Ingress 来代替。这里我主要有两点考虑，一是 Ingress Controller 不算是 Kubernetes 的自带组件，它可以有不同的选择（如 KONG、Nginx、Haproxy 等），同时也需要独立安装，出于环境复杂度最小化的考虑，我没有使用 Ingress。</p>\n<h3 id=\"·服务熔断\"><a href=\"#·服务熔断\" class=\"headerlink\" title=\"·服务熔断\"></a>·服务熔断</h3><p>仍然采用 Hystrix，Kubernetes 本身无法做到精细化的服务治理，包括熔断、流控、监视，等等。</p>\n<h3 id=\"·认证授权\"><a href=\"#·认证授权\" class=\"headerlink\" title=\"·认证授权\"></a>·认证授权</h3><p>采用 Spring Security OAuth 2.0，Kubernetes 的 RBAC 授权可以解决服务层面的访问控制问题，但 Security 是跨越了业务和技术的边界的，认证授权模块本身仍然承担着对前端用户的认证、授权职责，这部分是与业务相关的。</p>\n","tags":["Kubernetes"]}]